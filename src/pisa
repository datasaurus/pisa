#!/bin/sh
#
# This script creates an svg element that uses cartesian coordinates.
#
# Usage:
#	xyplot [-d] [-x pixels] [-y pixels] [-w pixels] [--]
#		x0 y0 width height command [args]
# where:
#	-d	requests svg document. Otherwise, output will be svg
#		element.
#	-x	specifies the x attribute of the svg element. Ignored
#		if -d option is present.
#	-y	specifies the y attribute of the svg element. Ignored
#		if -d option is present.
#	-w	specifies the width of the svg element, in display units.
#	x0	x coordinate of the LOWER LEFT corner of the plot, in plot
#		units.
#	y0	y coordinate of the LOWER LEFT corner of the plot, in plot
#		units.
#	width	width of the plot, in plot units (usually different from
#		display units).
#	height	height of the plot, in plot units (usually different from
#		display units).
#
# This script prints svg code that defines the requested svg element.
# Then it runs "command [args]", which should print svg code for the content
# of the plot area to standard output.
# When command exits, this script prints svg code to complete the svg element.
#
########################################################################
#
# Copyright (c) 2013 Gordon D. Carrie
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Please send feedback to dev0@trekix.net
#
########################################################################

# Check for numerical value
check_num() {
    name="$1"
    val="$2"
    if ! printf '%g' $val > /dev/null 2>&1
    then
	printf "$0: expected number for %s, got %s\n" "$name" "$val" 1>&2
	exit 1
    fi
}

# _dpy denotes display coordinates.
# Otherwise, variable specifies plot coordinates.

# Set some defaults
x_dpy="0"
y_dpy="0"
w_dpy="800.0"
document=

# Parse command line
while getopts :dxyw: opt
do
    case $opt
    in
	d)
	    document="1"
	    ;;
	x)
	    x_dpy=$OPTARG
	    check_num "display x coordinate" $x_dpy
	    ;;
	y)
	    y_dpy=$OPTARG
	    check_num "display y coordinate" $y_dpy
	    ;;
	w)
	    w_dpy=$OPTARG
	    check_num "display width" $w_dpy
	    ;;
	\?)
	    echo "$0: unknown option $OPTARG" 1>&2
	    ;;
    esac
done
shift `expr $OPTIND - 1`
if [ $# -lt 5 ]
then
    {
	printf "Usage: $0 [-d] [-x x_dpy] [-y y_dpy] [-w pixels] --"
	printf " x0 y0 width height command [args]\n"
    } 1>&2
    exit 1
fi
x0=$1; shift
check_num "x coordinate of plot origin" $x0
y0=$1; shift
check_num "y coordinate of plot origin" $y0
w=$1; shift
check_num "plot width" $w
h=$1; shift
check_num "plot height" $h
h_dpy=`echo "$w_dpy * $h / $w" | bc -l`
y1=`echo "$y0 + $h" | bc -l`

if test $document
then
    printf '<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>\n'
    printf '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"\n'
    printf '    "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n\n'
fi

printf '<svg
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    x="%f"
    y="%f"
    width="%f"
    height="%f"
    viewBox="0.0 0.0 %.1f %.1f" >\n' $x_dpy $y_dpy $w_dpy $h_dpy $w $h
printf '<g transform="matrix(1 0 0 -1 %.1f %.1f)">\n' \
    `echo "-1 * $x0" | bc -l` $y1

eval "$@"

printf '</g>\n'
printf '</svg>\n'
